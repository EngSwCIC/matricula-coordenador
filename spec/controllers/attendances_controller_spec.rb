# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe AttendancesController, type: :controller do
  before(:each) do
    @coordinator = User.new(email: 'coordinator@coordinator.com', password: '123456')
    @coordinator.add_role(:coordinator)
    @coordinator.save!
    sign_in @coordinator
  end

  describe 'GET #index' do
    it 'return all coodinators' do
      att = Attendance.create!(name_student: 'Artur', comment: 'Vish')
      att2 = Attendance.create!(name_student: 'Artur2', comment: 'Vish')
      get :index
      expect(assigns(:attendances)).to match_array([att, att2])
    end

    it 'renders the :index view' do
      get :index
      expect(response).to render_template('index')
    end
  end

  describe 'GET #new' do
    it 'assigns a new Attendance to @attendance' do
      get :new
      expect(assigns(:attendance)).to_not be_nil
    end

    it 'renders the :new template' do
      get :new
      expect(response).to render_template(:new)
    end
  end

  describe 'POST #create' do
    context 'with valid attributes' do
      before(:each) do
        post :create, params: { attendance: {
          name_student: 'Artur',
          comment: 'Deu muito ruim me passa',
          course_student: 'Engenharia da Computação',
          priority_student: 'Em condição'
        } }
      end
      it 'saves the new coodinator in the database' do
        expect(flash[:notice]).to eq('Atendimento Criado com sucesso')
        expect(Attendance.count).to be(1)
      end

      it 'redirects to backoffice coordinators' do
        expect(response).to redirect_to(attendances_path)
      end
    end

    context 'with invalid attributes' do
      before(:each) do
        post :create, params: { attendance: {
          name_student: 'Estudante',
          comment: ''
        } }
      end

      it 'does not save the new coordinator in the database' do
        expect(Attendance.count).to be(0)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid attributes' do
      before(:each) do
        @attendance = Attendance.create(name_student: 'Artur',
                                        comment: 'Deu muito ruim me passa',
                                        course_student: 'Engenharia da Computação',
                                        priority_student: 'Em condição')

        put :update, params: { id: @attendance.id,
                               attendance: {
                                 name_student: 'Moutinho'
                               } }
      end

      it 'updates the coodinator in the database' do
        @attendance = Attendance.find(@attendance.id)
        expect(flash[:notice]).to eq('Atendimento editado com sucesso')
        expect(@attendance.name_student).to eql('Moutinho')
      end

      it 'redirects to atendimentos' do
        expect(response).to redirect_to(attendances_path)
      end
    end

    context 'with invalid attributes' do
      before(:each) do
        @attendance = Attendance.create(name_student: 'Artur',
                                        comment: 'Deu muito ruim me passa',
                                        course_student: 'Engenharia da Computação',
                                        priority_student: 'Em condição')

        put :update, params: { id: @attendance.id,
                               attendance: {
                                 name_student: ''
                               } }
      end

      it 'does not updates the attendance in the database' do
        @attendance = Attendance.find(@attendance.id)
        expect(@attendance.name_student).to eql('Artur')
      end
    end
  end

  describe 'GET #edit' do
    before(:each) do
      @attendance = Attendance.create(name_student: 'Artur',
                                      comment: 'Deu muito ruim me passa',
                                      course_student: 'Engenharia da Computação',
                                      priority_student: 'Em condição')

      get :edit, params: { id: @attendance.id }
    end

    it 'assigns a new Attendance to @attendance' do
      expect(assigns(:attendance)).to_not be_nil
    end

    it 'renders the :edit template' do
      expect(response).to render_template(:edit)
    end
  end

  describe 'DELETE #delete' do
    before(:each) do
      @attendance = Attendance.create(name_student: 'Artur',
                                      comment: 'Deu muito ruim me passa',
                                      course_student: 'Engenharia da Computação',
                                      priority_student: 'Em condição')

      delete :destroy, params: { id: @attendance.id }
    end

    it 'delete coordinator' do
      expect(flash[:notice]).to eq('Atendimento foi realizado com sucesso')
      expect(Attendance.count).to be(0)
    end
  end
end
